/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.46
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(sh.ory.model.SubmitSelfServiceLoginFlowBody.class, new TypeSelector<sh.ory.model.SubmitSelfServiceLoginFlowBody>() {
                    @Override
                    public Class<? extends sh.ory.model.SubmitSelfServiceLoginFlowBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("lookup_secret", sh.ory.model.SubmitSelfServiceLoginFlowWithLookupSecretMethodBody.class);
                        classByDiscriminatorValue.put("oidc", sh.ory.model.SubmitSelfServiceLoginFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("password", sh.ory.model.SubmitSelfServiceLoginFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowWithLookupSecretMethodBody", sh.ory.model.SubmitSelfServiceLoginFlowWithLookupSecretMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowWithOidcMethodBody", sh.ory.model.SubmitSelfServiceLoginFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowWithPasswordMethodBody", sh.ory.model.SubmitSelfServiceLoginFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowWithTotpMethodBody", sh.ory.model.SubmitSelfServiceLoginFlowWithTotpMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowWithWebAuthnMethodBody", sh.ory.model.SubmitSelfServiceLoginFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("totp", sh.ory.model.SubmitSelfServiceLoginFlowWithTotpMethodBody.class);
                        classByDiscriminatorValue.put("webauthn", sh.ory.model.SubmitSelfServiceLoginFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceLoginFlowBody", sh.ory.model.SubmitSelfServiceLoginFlowBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "method"));
                    }
          })
                .registerTypeSelector(sh.ory.model.SubmitSelfServiceRecoveryFlowBody.class, new TypeSelector<sh.ory.model.SubmitSelfServiceRecoveryFlowBody>() {
                    @Override
                    public Class<? extends sh.ory.model.SubmitSelfServiceRecoveryFlowBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("link", sh.ory.model.SubmitSelfServiceRecoveryFlowWithLinkMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRecoveryFlowWithLinkMethodBody", sh.ory.model.SubmitSelfServiceRecoveryFlowWithLinkMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRecoveryFlowBody", sh.ory.model.SubmitSelfServiceRecoveryFlowBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "method"));
                    }
          })
                .registerTypeSelector(sh.ory.model.SubmitSelfServiceRegistrationFlowBody.class, new TypeSelector<sh.ory.model.SubmitSelfServiceRegistrationFlowBody>() {
                    @Override
                    public Class<? extends sh.ory.model.SubmitSelfServiceRegistrationFlowBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("oidc", sh.ory.model.SubmitSelfServiceRegistrationFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("password", sh.ory.model.SubmitSelfServiceRegistrationFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRegistrationFlowWithOidcMethodBody", sh.ory.model.SubmitSelfServiceRegistrationFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRegistrationFlowWithPasswordMethodBody", sh.ory.model.SubmitSelfServiceRegistrationFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRegistrationFlowWithWebAuthnMethodBody", sh.ory.model.SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("webauthn", sh.ory.model.SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceRegistrationFlowBody", sh.ory.model.SubmitSelfServiceRegistrationFlowBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "method"));
                    }
          })
                .registerTypeSelector(sh.ory.model.SubmitSelfServiceSettingsFlowBody.class, new TypeSelector<sh.ory.model.SubmitSelfServiceSettingsFlowBody>() {
                    @Override
                    public Class<? extends sh.ory.model.SubmitSelfServiceSettingsFlowBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("lookup_secret", sh.ory.model.SubmitSelfServiceSettingsFlowWithLookupMethodBody.class);
                        classByDiscriminatorValue.put("oidc", sh.ory.model.SubmitSelfServiceSettingsFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("password", sh.ory.model.SubmitSelfServiceSettingsFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("profile", sh.ory.model.SubmitSelfServiceSettingsFlowWithProfileMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithLookupMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithLookupMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithOidcMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithOidcMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithPasswordMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithPasswordMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithProfileMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithProfileMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithTotpMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithTotpMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowWithWebAuthnMethodBody", sh.ory.model.SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("totp", sh.ory.model.SubmitSelfServiceSettingsFlowWithTotpMethodBody.class);
                        classByDiscriminatorValue.put("webauthn", sh.ory.model.SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceSettingsFlowBody", sh.ory.model.SubmitSelfServiceSettingsFlowBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "method"));
                    }
          })
                .registerTypeSelector(sh.ory.model.SubmitSelfServiceVerificationFlowBody.class, new TypeSelector<sh.ory.model.SubmitSelfServiceVerificationFlowBody>() {
                    @Override
                    public Class<? extends sh.ory.model.SubmitSelfServiceVerificationFlowBody> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("link", sh.ory.model.SubmitSelfServiceVerificationFlowWithLinkMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceVerificationFlowWithLinkMethodBody", sh.ory.model.SubmitSelfServiceVerificationFlowWithLinkMethodBody.class);
                        classByDiscriminatorValue.put("submitSelfServiceVerificationFlowBody", sh.ory.model.SubmitSelfServiceVerificationFlowBody.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "method"));
                    }
          })
                .registerTypeSelector(sh.ory.model.UiNodeAttributes.class, new TypeSelector<sh.ory.model.UiNodeAttributes>() {
                    @Override
                    public Class<? extends sh.ory.model.UiNodeAttributes> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("a", sh.ory.model.UiNodeAnchorAttributes.class);
                        classByDiscriminatorValue.put("img", sh.ory.model.UiNodeImageAttributes.class);
                        classByDiscriminatorValue.put("input", sh.ory.model.UiNodeInputAttributes.class);
                        classByDiscriminatorValue.put("script", sh.ory.model.UiNodeScriptAttributes.class);
                        classByDiscriminatorValue.put("text", sh.ory.model.UiNodeTextAttributes.class);
                        classByDiscriminatorValue.put("uiNodeAnchorAttributes", sh.ory.model.UiNodeAnchorAttributes.class);
                        classByDiscriminatorValue.put("uiNodeImageAttributes", sh.ory.model.UiNodeImageAttributes.class);
                        classByDiscriminatorValue.put("uiNodeInputAttributes", sh.ory.model.UiNodeInputAttributes.class);
                        classByDiscriminatorValue.put("uiNodeScriptAttributes", sh.ory.model.UiNodeScriptAttributes.class);
                        classByDiscriminatorValue.put("uiNodeTextAttributes", sh.ory.model.UiNodeTextAttributes.class);
                        classByDiscriminatorValue.put("uiNodeAttributes", sh.ory.model.UiNodeAttributes.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "node_type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AcceptConsentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AcceptLoginRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ActiveProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityImportCredentialsOidc.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityImportCredentialsOidcConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityImportCredentialsOidcProvider.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityImportCredentialsPassword.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateIdentityImportCredentialsPasswordConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminCreateSelfServiceRecoveryLinkBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminIdentityImportCredentials.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.AdminUpdateIdentityBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CloudAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CnameSettings.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CompletedRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ConsentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ConsentRequestSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CreateCustomHostnameBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CreateProjectApiKeyRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CreateProjectBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.CreateSubscriptionPayload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ErrorAuthenticatorAssuranceLevelNotSatisfied.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ExpandTree.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.FlushInactiveOAuth2TokensRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.FlushLoginConsentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GenericError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GenericErrorContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GetCheckResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GetManagedIdentitySchemaLocation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GetRelationTuplesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.GetVersion200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.HealthNotReadyStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.HealthStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Identity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentityCredentials.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentityCredentialsOidc.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentityCredentialsOidcProvider.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentityCredentialsPassword.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentitySchemaContainer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IdentitySchemaPreset.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.InvitePayload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IsOwnerForProjectBySlug.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IsOwnerForProjectBySlugPayload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IsReady200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.IsReady503Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.JSONWebKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.JSONWebKeySet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.JsonError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.JsonPatch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.JsonWebKeySetGeneratorRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.KetoNamespace.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.LoginRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.LogoutRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ManagedIdentitySchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ManagedIdentitySchemaValidationResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NeedsPrivilegedSessionError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NormalizedProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NormalizedProjectRevision.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NormalizedProjectRevisionHook.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NormalizedProjectRevisionIdentitySchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.NormalizedProjectRevisionThirdPartyProvider.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.OAuth2Client.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.OAuth2TokenIntrospection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Oauth2TokenResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.OauthTokenResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.OpenIDConnectContext.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Pagination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.PatchDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.PatchDocument.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.PreviousConsentSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Project.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectApiKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectHost.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectInvite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectServiceIdentity.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectServiceOAuth2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectServicePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProjectServices.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.ProvisionMockSubscriptionPayload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.QuotaCustomDomains.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.QuotaProjectMemberSeats.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RecoveryAddress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RefreshTokenHookRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RefreshTokenHookResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RejectRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RelationQuery.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RelationTuple.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RequestWasHandledResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.RevokedSessions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SchemaPatch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceBrowserLocationChangeRequiredError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceFlowExpiredError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceLoginFlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceLogoutUrl.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceRecoveryFlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceRecoveryLink.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceRegistrationFlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceSettingsFlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SelfServiceVerificationFlow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Session.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SessionAuthenticationMethod.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SessionDevice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SettingsProfileFormConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.StripeCustomerResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubjectSet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceFlowWithWebAuthnRegistrationMethod.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowWithLookupSecretMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowWithOidcMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowWithPasswordMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowWithTotpMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLoginFlowWithWebAuthnMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceLogoutFlowWithoutBrowserBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRecoveryFlowBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRecoveryFlowWithLinkMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRegistrationFlowBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRegistrationFlowWithOidcMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRegistrationFlowWithPasswordMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceRegistrationFlowWithWebAuthnMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithLookupMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithOidcMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithPasswordMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithProfileMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithTotpMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceVerificationFlowBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SubmitSelfServiceVerificationFlowWithLinkMethodBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Subscription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SuccessfulProjectUpdate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SuccessfulSelfServiceLoginWithoutBrowser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.SuccessfulSelfServiceRegistrationWithoutBrowser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.TokenPagination.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.TokenPaginationHeaders.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.TrustJwtGrantIssuerBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.TrustedJsonWebKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.TrustedJwtGrantIssuer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiContainer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeAnchorAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeImageAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeInputAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeMeta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeScriptAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiNodeTextAttributes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UiText.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UpdateCustomHostnameBody.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UpdateProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UpdateSubscriptionPayload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.UserinfoResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.VerifiableIdentityAddress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Version.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.Warning.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new sh.ory.model.WellKnown.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
