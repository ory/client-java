/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.28
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RejectOAuth2Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-06T13:26:20.971525584Z[Etc/UTC]")
public class RejectOAuth2Request {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ERROR_DEBUG = "error_debug";
  @SerializedName(SERIALIZED_NAME_ERROR_DEBUG)
  private String errorDebug;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "error_description";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_ERROR_HINT = "error_hint";
  @SerializedName(SERIALIZED_NAME_ERROR_HINT)
  private String errorHint;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Long statusCode;

  public RejectOAuth2Request() { 
  }

  public RejectOAuth2Request error(String error) {
    
    this.error = error;
    return this;
  }

   /**
   * The error should follow the OAuth2 error format (e.g. &#x60;invalid_request&#x60;, &#x60;login_required&#x60;).  Defaults to &#x60;request_denied&#x60;.
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).  Defaults to `request_denied`.")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    this.error = error;
  }


  public RejectOAuth2Request errorDebug(String errorDebug) {
    
    this.errorDebug = errorDebug;
    return this;
  }

   /**
   * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
   * @return errorDebug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.")

  public String getErrorDebug() {
    return errorDebug;
  }


  public void setErrorDebug(String errorDebug) {
    this.errorDebug = errorDebug;
  }


  public RejectOAuth2Request errorDescription(String errorDescription) {
    
    this.errorDescription = errorDescription;
    return this;
  }

   /**
   * Description of the error in a human readable format.
   * @return errorDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the error in a human readable format.")

  public String getErrorDescription() {
    return errorDescription;
  }


  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public RejectOAuth2Request errorHint(String errorHint) {
    
    this.errorHint = errorHint;
    return this;
  }

   /**
   * Hint to help resolve the error.
   * @return errorHint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hint to help resolve the error.")

  public String getErrorHint() {
    return errorHint;
  }


  public void setErrorHint(String errorHint) {
    this.errorHint = errorHint;
  }


  public RejectOAuth2Request statusCode(Long statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Represents the HTTP status code of the error (e.g. 401 or 403)  Defaults to 400
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the HTTP status code of the error (e.g. 401 or 403)  Defaults to 400")

  public Long getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Long statusCode) {
    this.statusCode = statusCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RejectOAuth2Request rejectOAuth2Request = (RejectOAuth2Request) o;
    return Objects.equals(this.error, rejectOAuth2Request.error) &&
        Objects.equals(this.errorDebug, rejectOAuth2Request.errorDebug) &&
        Objects.equals(this.errorDescription, rejectOAuth2Request.errorDescription) &&
        Objects.equals(this.errorHint, rejectOAuth2Request.errorHint) &&
        Objects.equals(this.statusCode, rejectOAuth2Request.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, errorDebug, errorDescription, errorHint, statusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RejectOAuth2Request {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorDebug: ").append(toIndentedString(errorDebug)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    errorHint: ").append(toIndentedString(errorHint)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

