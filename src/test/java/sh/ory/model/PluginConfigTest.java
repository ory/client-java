/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.0.1-alpha.15
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sh.ory.model.PluginConfigArgs;
import sh.ory.model.PluginConfigInterface;
import sh.ory.model.PluginConfigLinux;
import sh.ory.model.PluginConfigNetwork;
import sh.ory.model.PluginConfigRootfs;
import sh.ory.model.PluginConfigUser;
import sh.ory.model.PluginEnv;
import sh.ory.model.PluginMount;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for PluginConfig
 */
public class PluginConfigTest {
    private final PluginConfig model = new PluginConfig();

    /**
     * Model tests for PluginConfig
     */
    @Test
    public void testPluginConfig() {
        // TODO: test PluginConfig
    }

    /**
     * Test the property 'args'
     */
    @Test
    public void argsTest() {
        // TODO: test args
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'dockerVersion'
     */
    @Test
    public void dockerVersionTest() {
        // TODO: test dockerVersion
    }

    /**
     * Test the property 'documentation'
     */
    @Test
    public void documentationTest() {
        // TODO: test documentation
    }

    /**
     * Test the property 'entrypoint'
     */
    @Test
    public void entrypointTest() {
        // TODO: test entrypoint
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property '_interface'
     */
    @Test
    public void _interfaceTest() {
        // TODO: test _interface
    }

    /**
     * Test the property 'ipcHost'
     */
    @Test
    public void ipcHostTest() {
        // TODO: test ipcHost
    }

    /**
     * Test the property 'linux'
     */
    @Test
    public void linuxTest() {
        // TODO: test linux
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    public void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'pidHost'
     */
    @Test
    public void pidHostTest() {
        // TODO: test pidHost
    }

    /**
     * Test the property 'propagatedMount'
     */
    @Test
    public void propagatedMountTest() {
        // TODO: test propagatedMount
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'workDir'
     */
    @Test
    public void workDirTest() {
        // TODO: test workDir
    }

    /**
     * Test the property 'rootfs'
     */
    @Test
    public void rootfsTest() {
        // TODO: test rootfs
    }

}
