/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.48
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.JSON;

/**
 * RefreshTokenHookRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-15T13:47:36.645961205Z[Etc/UTC]")
public class RefreshTokenHookRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_GRANTED_AUDIENCE = "granted_audience";
  @SerializedName(SERIALIZED_NAME_GRANTED_AUDIENCE)
  private List<String> grantedAudience = null;

  public static final String SERIALIZED_NAME_GRANTED_SCOPES = "granted_scopes";
  @SerializedName(SERIALIZED_NAME_GRANTED_SCOPES)
  private List<String> grantedScopes = null;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public RefreshTokenHookRequest() { 
  }

  public RefreshTokenHookRequest clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * ClientID is the identifier of the OAuth 2.0 client.
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ClientID is the identifier of the OAuth 2.0 client.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public RefreshTokenHookRequest grantedAudience(List<String> grantedAudience) {
    
    this.grantedAudience = grantedAudience;
    return this;
  }

  public RefreshTokenHookRequest addGrantedAudienceItem(String grantedAudienceItem) {
    if (this.grantedAudience == null) {
      this.grantedAudience = new ArrayList<>();
    }
    this.grantedAudience.add(grantedAudienceItem);
    return this;
  }

   /**
   * GrantedAudience is the list of audiences granted to the OAuth 2.0 client.
   * @return grantedAudience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "GrantedAudience is the list of audiences granted to the OAuth 2.0 client.")

  public List<String> getGrantedAudience() {
    return grantedAudience;
  }


  public void setGrantedAudience(List<String> grantedAudience) {
    this.grantedAudience = grantedAudience;
  }


  public RefreshTokenHookRequest grantedScopes(List<String> grantedScopes) {
    
    this.grantedScopes = grantedScopes;
    return this;
  }

  public RefreshTokenHookRequest addGrantedScopesItem(String grantedScopesItem) {
    if (this.grantedScopes == null) {
      this.grantedScopes = new ArrayList<>();
    }
    this.grantedScopes.add(grantedScopesItem);
    return this;
  }

   /**
   * GrantedScopes is the list of scopes granted to the OAuth 2.0 client.
   * @return grantedScopes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "GrantedScopes is the list of scopes granted to the OAuth 2.0 client.")

  public List<String> getGrantedScopes() {
    return grantedScopes;
  }


  public void setGrantedScopes(List<String> grantedScopes) {
    this.grantedScopes = grantedScopes;
  }


  public RefreshTokenHookRequest subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject is the identifier of the authenticated end-user.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject is the identifier of the authenticated end-user.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefreshTokenHookRequest refreshTokenHookRequest = (RefreshTokenHookRequest) o;
    return Objects.equals(this.clientId, refreshTokenHookRequest.clientId) &&
        Objects.equals(this.grantedAudience, refreshTokenHookRequest.grantedAudience) &&
        Objects.equals(this.grantedScopes, refreshTokenHookRequest.grantedScopes) &&
        Objects.equals(this.subject, refreshTokenHookRequest.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, grantedAudience, grantedScopes, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefreshTokenHookRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    grantedAudience: ").append(toIndentedString(grantedAudience)).append("\n");
    sb.append("    grantedScopes: ").append(toIndentedString(grantedScopes)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("granted_audience");
    openapiFields.add("granted_scopes");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RefreshTokenHookRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RefreshTokenHookRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefreshTokenHookRequest is not found in the empty JSON string", RefreshTokenHookRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RefreshTokenHookRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefreshTokenHookRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("granted_audience") != null && !jsonObj.get("granted_audience").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `granted_audience` to be an array in the JSON string but got `%s`", jsonObj.get("granted_audience").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("granted_scopes") != null && !jsonObj.get("granted_scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `granted_scopes` to be an array in the JSON string but got `%s`", jsonObj.get("granted_scopes").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefreshTokenHookRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefreshTokenHookRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefreshTokenHookRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefreshTokenHookRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RefreshTokenHookRequest>() {
           @Override
           public void write(JsonWriter out, RefreshTokenHookRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefreshTokenHookRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RefreshTokenHookRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RefreshTokenHookRequest
  * @throws IOException if the JSON string is invalid with respect to RefreshTokenHookRequest
  */
  public static RefreshTokenHookRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefreshTokenHookRequest.class);
  }

 /**
  * Convert an instance of RefreshTokenHookRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

