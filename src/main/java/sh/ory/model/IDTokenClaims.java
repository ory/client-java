/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.2.0-alpha.60
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.JSON;

/**
 * IDTokenClaims represent the claims used in open id connect requests
 */
@ApiModel(description = "IDTokenClaims represent the claims used in open id connect requests")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-24T09:56:23.976880967Z[Etc/UTC]")
public class IDTokenClaims {
  public static final String SERIALIZED_NAME_ACR = "acr";
  @SerializedName(SERIALIZED_NAME_ACR)
  private String acr;

  public static final String SERIALIZED_NAME_AMR = "amr";
  @SerializedName(SERIALIZED_NAME_AMR)
  private List<String> amr = null;

  public static final String SERIALIZED_NAME_AT_HASH = "at_hash";
  @SerializedName(SERIALIZED_NAME_AT_HASH)
  private String atHash;

  public static final String SERIALIZED_NAME_AUD = "aud";
  @SerializedName(SERIALIZED_NAME_AUD)
  private List<String> aud = null;

  public static final String SERIALIZED_NAME_AUTH_TIME = "auth_time";
  @SerializedName(SERIALIZED_NAME_AUTH_TIME)
  private OffsetDateTime authTime;

  public static final String SERIALIZED_NAME_C_HASH = "c_hash";
  @SerializedName(SERIALIZED_NAME_C_HASH)
  private String cHash;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private OffsetDateTime exp;

  public static final String SERIALIZED_NAME_EXT = "ext";
  @SerializedName(SERIALIZED_NAME_EXT)
  private Map<String, Object> ext = null;

  public static final String SERIALIZED_NAME_IAT = "iat";
  @SerializedName(SERIALIZED_NAME_IAT)
  private OffsetDateTime iat;

  public static final String SERIALIZED_NAME_ISS = "iss";
  @SerializedName(SERIALIZED_NAME_ISS)
  private String iss;

  public static final String SERIALIZED_NAME_JTI = "jti";
  @SerializedName(SERIALIZED_NAME_JTI)
  private String jti;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_RAT = "rat";
  @SerializedName(SERIALIZED_NAME_RAT)
  private OffsetDateTime rat;

  public static final String SERIALIZED_NAME_SUB = "sub";
  @SerializedName(SERIALIZED_NAME_SUB)
  private String sub;

  public IDTokenClaims() { 
  }

  public IDTokenClaims acr(String acr) {
    
    this.acr = acr;
    return this;
  }

   /**
   * Get acr
   * @return acr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcr() {
    return acr;
  }


  public void setAcr(String acr) {
    this.acr = acr;
  }


  public IDTokenClaims amr(List<String> amr) {
    
    this.amr = amr;
    return this;
  }

  public IDTokenClaims addAmrItem(String amrItem) {
    if (this.amr == null) {
      this.amr = new ArrayList<>();
    }
    this.amr.add(amrItem);
    return this;
  }

   /**
   * Get amr
   * @return amr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAmr() {
    return amr;
  }


  public void setAmr(List<String> amr) {
    this.amr = amr;
  }


  public IDTokenClaims atHash(String atHash) {
    
    this.atHash = atHash;
    return this;
  }

   /**
   * Get atHash
   * @return atHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAtHash() {
    return atHash;
  }


  public void setAtHash(String atHash) {
    this.atHash = atHash;
  }


  public IDTokenClaims aud(List<String> aud) {
    
    this.aud = aud;
    return this;
  }

  public IDTokenClaims addAudItem(String audItem) {
    if (this.aud == null) {
      this.aud = new ArrayList<>();
    }
    this.aud.add(audItem);
    return this;
  }

   /**
   * Get aud
   * @return aud
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAud() {
    return aud;
  }


  public void setAud(List<String> aud) {
    this.aud = aud;
  }


  public IDTokenClaims authTime(OffsetDateTime authTime) {
    
    this.authTime = authTime;
    return this;
  }

   /**
   * Get authTime
   * @return authTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getAuthTime() {
    return authTime;
  }


  public void setAuthTime(OffsetDateTime authTime) {
    this.authTime = authTime;
  }


  public IDTokenClaims cHash(String cHash) {
    
    this.cHash = cHash;
    return this;
  }

   /**
   * Get cHash
   * @return cHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getcHash() {
    return cHash;
  }


  public void setcHash(String cHash) {
    this.cHash = cHash;
  }


  public IDTokenClaims exp(OffsetDateTime exp) {
    
    this.exp = exp;
    return this;
  }

   /**
   * Get exp
   * @return exp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExp() {
    return exp;
  }


  public void setExp(OffsetDateTime exp) {
    this.exp = exp;
  }


  public IDTokenClaims ext(Map<String, Object> ext) {
    
    this.ext = ext;
    return this;
  }

  public IDTokenClaims putExtItem(String key, Object extItem) {
    if (this.ext == null) {
      this.ext = new HashMap<>();
    }
    this.ext.put(key, extItem);
    return this;
  }

   /**
   * Get ext
   * @return ext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getExt() {
    return ext;
  }


  public void setExt(Map<String, Object> ext) {
    this.ext = ext;
  }


  public IDTokenClaims iat(OffsetDateTime iat) {
    
    this.iat = iat;
    return this;
  }

   /**
   * Get iat
   * @return iat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getIat() {
    return iat;
  }


  public void setIat(OffsetDateTime iat) {
    this.iat = iat;
  }


  public IDTokenClaims iss(String iss) {
    
    this.iss = iss;
    return this;
  }

   /**
   * Get iss
   * @return iss
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIss() {
    return iss;
  }


  public void setIss(String iss) {
    this.iss = iss;
  }


  public IDTokenClaims jti(String jti) {
    
    this.jti = jti;
    return this;
  }

   /**
   * Get jti
   * @return jti
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJti() {
    return jti;
  }


  public void setJti(String jti) {
    this.jti = jti;
  }


  public IDTokenClaims nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public IDTokenClaims rat(OffsetDateTime rat) {
    
    this.rat = rat;
    return this;
  }

   /**
   * Get rat
   * @return rat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRat() {
    return rat;
  }


  public void setRat(OffsetDateTime rat) {
    this.rat = rat;
  }


  public IDTokenClaims sub(String sub) {
    
    this.sub = sub;
    return this;
  }

   /**
   * Get sub
   * @return sub
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSub() {
    return sub;
  }


  public void setSub(String sub) {
    this.sub = sub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IDTokenClaims idTokenClaims = (IDTokenClaims) o;
    return Objects.equals(this.acr, idTokenClaims.acr) &&
        Objects.equals(this.amr, idTokenClaims.amr) &&
        Objects.equals(this.atHash, idTokenClaims.atHash) &&
        Objects.equals(this.aud, idTokenClaims.aud) &&
        Objects.equals(this.authTime, idTokenClaims.authTime) &&
        Objects.equals(this.cHash, idTokenClaims.cHash) &&
        Objects.equals(this.exp, idTokenClaims.exp) &&
        Objects.equals(this.ext, idTokenClaims.ext) &&
        Objects.equals(this.iat, idTokenClaims.iat) &&
        Objects.equals(this.iss, idTokenClaims.iss) &&
        Objects.equals(this.jti, idTokenClaims.jti) &&
        Objects.equals(this.nonce, idTokenClaims.nonce) &&
        Objects.equals(this.rat, idTokenClaims.rat) &&
        Objects.equals(this.sub, idTokenClaims.sub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acr, amr, atHash, aud, authTime, cHash, exp, ext, iat, iss, jti, nonce, rat, sub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IDTokenClaims {\n");
    sb.append("    acr: ").append(toIndentedString(acr)).append("\n");
    sb.append("    amr: ").append(toIndentedString(amr)).append("\n");
    sb.append("    atHash: ").append(toIndentedString(atHash)).append("\n");
    sb.append("    aud: ").append(toIndentedString(aud)).append("\n");
    sb.append("    authTime: ").append(toIndentedString(authTime)).append("\n");
    sb.append("    cHash: ").append(toIndentedString(cHash)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    iat: ").append(toIndentedString(iat)).append("\n");
    sb.append("    iss: ").append(toIndentedString(iss)).append("\n");
    sb.append("    jti: ").append(toIndentedString(jti)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    rat: ").append(toIndentedString(rat)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acr");
    openapiFields.add("amr");
    openapiFields.add("at_hash");
    openapiFields.add("aud");
    openapiFields.add("auth_time");
    openapiFields.add("c_hash");
    openapiFields.add("exp");
    openapiFields.add("ext");
    openapiFields.add("iat");
    openapiFields.add("iss");
    openapiFields.add("jti");
    openapiFields.add("nonce");
    openapiFields.add("rat");
    openapiFields.add("sub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IDTokenClaims
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IDTokenClaims.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IDTokenClaims is not found in the empty JSON string", IDTokenClaims.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IDTokenClaims.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IDTokenClaims` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("acr") != null && !jsonObj.get("acr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acr").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("amr") != null && !jsonObj.get("amr").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amr` to be an array in the JSON string but got `%s`", jsonObj.get("amr").toString()));
      }
      if (jsonObj.get("at_hash") != null && !jsonObj.get("at_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at_hash").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("aud") != null && !jsonObj.get("aud").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aud` to be an array in the JSON string but got `%s`", jsonObj.get("aud").toString()));
      }
      if (jsonObj.get("c_hash") != null && !jsonObj.get("c_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `c_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("c_hash").toString()));
      }
      if (jsonObj.get("iss") != null && !jsonObj.get("iss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iss").toString()));
      }
      if (jsonObj.get("jti") != null && !jsonObj.get("jti").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jti` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jti").toString()));
      }
      if (jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if (jsonObj.get("sub") != null && !jsonObj.get("sub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IDTokenClaims.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IDTokenClaims' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IDTokenClaims> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IDTokenClaims.class));

       return (TypeAdapter<T>) new TypeAdapter<IDTokenClaims>() {
           @Override
           public void write(JsonWriter out, IDTokenClaims value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IDTokenClaims read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IDTokenClaims given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IDTokenClaims
  * @throws IOException if the JSON string is invalid with respect to IDTokenClaims
  */
  public static IDTokenClaims fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IDTokenClaims.class);
  }

 /**
  * Convert an instance of IDTokenClaims to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

