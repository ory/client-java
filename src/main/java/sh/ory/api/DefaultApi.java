/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.0.1-alpha.6
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.api;

import sh.ory.ApiCallback;
import sh.ory.ApiClient;
import sh.ory.ApiException;
import sh.ory.ApiResponse;
import sh.ory.Configuration;
import sh.ory.Pair;
import sh.ory.ProgressRequestBody;
import sh.ory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sh.ory.model.CreateIdentity;
import sh.ory.model.CreateRecoveryLink;
import sh.ory.model.GenericError;
import sh.ory.model.Identity;
import sh.ory.model.InlineResponse200;
import sh.ory.model.InlineResponse2001;
import sh.ory.model.InlineResponse503;
import sh.ory.model.JsonError;
import sh.ory.model.LoginFlow;
import sh.ory.model.LoginViaApiResponse;
import sh.ory.model.RecoveryFlow;
import sh.ory.model.RecoveryLink;
import sh.ory.model.RegistrationFlow;
import sh.ory.model.RegistrationViaApiResponse;
import sh.ory.model.RevokeSession;
import sh.ory.model.SelfServiceErrorContainer;
import sh.ory.model.Session;
import sh.ory.model.SettingsFlow;
import sh.ory.model.SettingsViaApiResponse;
import sh.ory.model.SubmitSelfServiceLoginFlow;
import sh.ory.model.SubmitSelfServiceRecoveryFlowWithLinkMethod;
import sh.ory.model.SubmitSelfServiceRegistrationFlow;
import sh.ory.model.SubmitSelfServiceSettingsFlow;
import sh.ory.model.UpdateIdentity;
import sh.ory.model.VerificationFlow;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createIdentityAdmin
     * @param createIdentity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIdentityAdminCall(CreateIdentity createIdentity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createIdentity;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIdentityAdminValidateBeforeCall(CreateIdentity createIdentity, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createIdentityAdminCall(createIdentity, _callback);
        return localVarCall;

    }

    /**
     * Create an Identity
     * This endpoint creates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param createIdentity  (optional)
     * @return Identity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Identity createIdentityAdmin(CreateIdentity createIdentity) throws ApiException {
        ApiResponse<Identity> localVarResp = createIdentityAdminWithHttpInfo(createIdentity);
        return localVarResp.getData();
    }

    /**
     * Create an Identity
     * This endpoint creates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param createIdentity  (optional)
     * @return ApiResponse&lt;Identity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Identity> createIdentityAdminWithHttpInfo(CreateIdentity createIdentity) throws ApiException {
        okhttp3.Call localVarCall = createIdentityAdminValidateBeforeCall(createIdentity, null);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Identity (asynchronously)
     * This endpoint creates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param createIdentity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIdentityAdminAsync(CreateIdentity createIdentity, final ApiCallback<Identity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIdentityAdminValidateBeforeCall(createIdentity, _callback);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRecoveryLinkAdmin
     * @param createRecoveryLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryLink </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecoveryLinkAdminCall(CreateRecoveryLink createRecoveryLink, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createRecoveryLink;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/recovery/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecoveryLinkAdminValidateBeforeCall(CreateRecoveryLink createRecoveryLink, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createRecoveryLinkAdminCall(createRecoveryLink, _callback);
        return localVarCall;

    }

    /**
     * Create a Recovery Link
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @param createRecoveryLink  (optional)
     * @return RecoveryLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryLink </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryLink createRecoveryLinkAdmin(CreateRecoveryLink createRecoveryLink) throws ApiException {
        ApiResponse<RecoveryLink> localVarResp = createRecoveryLinkAdminWithHttpInfo(createRecoveryLink);
        return localVarResp.getData();
    }

    /**
     * Create a Recovery Link
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @param createRecoveryLink  (optional)
     * @return ApiResponse&lt;RecoveryLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryLink </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryLink> createRecoveryLinkAdminWithHttpInfo(CreateRecoveryLink createRecoveryLink) throws ApiException {
        okhttp3.Call localVarCall = createRecoveryLinkAdminValidateBeforeCall(createRecoveryLink, null);
        Type localVarReturnType = new TypeToken<RecoveryLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Recovery Link (asynchronously)
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @param createRecoveryLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryLink </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecoveryLinkAdminAsync(CreateRecoveryLink createRecoveryLink, final ApiCallback<RecoveryLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecoveryLinkAdminValidateBeforeCall(createRecoveryLink, _callback);
        Type localVarReturnType = new TypeToken<RecoveryLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIdentityAdmin
     * @param id ID is the identity&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdentityAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/identities/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIdentityAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteIdentityAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIdentityAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete an Identity
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID is the identity&#39;s ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIdentityAdmin(String id) throws ApiException {
        deleteIdentityAdminWithHttpInfo(id);
    }

    /**
     * Delete an Identity
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID is the identity&#39;s ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIdentityAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteIdentityAdminValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Identity (asynchronously)
     * Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID is the identity&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdentityAdminAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIdentityAdminValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIdentityAdmin
     * @param id ID must be set to the ID of identity you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/identities/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentityAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIdentityAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getIdentityAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get an Identity
     * Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to get (required)
     * @return Identity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Identity getIdentityAdmin(String id) throws ApiException {
        ApiResponse<Identity> localVarResp = getIdentityAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an Identity
     * Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to get (required)
     * @return ApiResponse&lt;Identity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Identity> getIdentityAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getIdentityAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Identity (asynchronously)
     * Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single identity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityAdminAsync(String id, final ApiCallback<Identity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentityAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchema
     * @param id ID must be set to the ID of schema you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/schemas/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchema(Async)");
        }
        

        okhttp3.Call localVarCall = getSchemaCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Object getSchema(String id) throws ApiException {
        ApiResponse<Object> localVarResp = getSchemaWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSchemaWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchemaAdmin
     * @param id ID must be set to the ID of schema you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/schemas/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSchemaAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSchemaAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Object getSchemaAdmin(String id) throws ApiException {
        ApiResponse<Object> localVarResp = getSchemaAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSchemaAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSchemaAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Traits Schema Definition
     * @param id ID must be set to the ID of schema you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> jsonSchema </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaAdminAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceError
     * @param error Error is the container&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceErrorCall(String error, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceErrorValidateBeforeCall(String error, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'error' is set
        if (error == null) {
            throw new ApiException("Missing the required parameter 'error' when calling getSelfServiceError(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceErrorCall(error, _callback);
        return localVarCall;

    }

    /**
     * Get User-Facing Self-Service Errors
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @return SelfServiceErrorContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SelfServiceErrorContainer getSelfServiceError(String error) throws ApiException {
        ApiResponse<SelfServiceErrorContainer> localVarResp = getSelfServiceErrorWithHttpInfo(error);
        return localVarResp.getData();
    }

    /**
     * Get User-Facing Self-Service Errors
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @return ApiResponse&lt;SelfServiceErrorContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelfServiceErrorContainer> getSelfServiceErrorWithHttpInfo(String error) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceErrorValidateBeforeCall(error, null);
        Type localVarReturnType = new TypeToken<SelfServiceErrorContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User-Facing Self-Service Errors (asynchronously)
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceErrorAsync(String error, final ApiCallback<SelfServiceErrorContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceErrorValidateBeforeCall(error, _callback);
        Type localVarReturnType = new TypeToken<SelfServiceErrorContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceErrorAdmin
     * @param error Error is the container&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceErrorAdminCall(String error, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceErrorAdminValidateBeforeCall(String error, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'error' is set
        if (error == null) {
            throw new ApiException("Missing the required parameter 'error' when calling getSelfServiceErrorAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceErrorAdminCall(error, _callback);
        return localVarCall;

    }

    /**
     * Get User-Facing Self-Service Errors
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @return SelfServiceErrorContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SelfServiceErrorContainer getSelfServiceErrorAdmin(String error) throws ApiException {
        ApiResponse<SelfServiceErrorContainer> localVarResp = getSelfServiceErrorAdminWithHttpInfo(error);
        return localVarResp.getData();
    }

    /**
     * Get User-Facing Self-Service Errors
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @return ApiResponse&lt;SelfServiceErrorContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelfServiceErrorContainer> getSelfServiceErrorAdminWithHttpInfo(String error) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceErrorAdminValidateBeforeCall(error, null);
        Type localVarReturnType = new TypeToken<SelfServiceErrorContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User-Facing Self-Service Errors (asynchronously)
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?error&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @param error Error is the container&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User-facing error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceErrorAdminAsync(String error, final ApiCallback<SelfServiceErrorContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceErrorAdminValidateBeforeCall(error, _callback);
        Type localVarReturnType = new TypeToken<SelfServiceErrorContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceLoginFlow
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceLoginFlowCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/login/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceLoginFlowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceLoginFlow(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceLoginFlowCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Login Flow
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @return LoginFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public LoginFlow getSelfServiceLoginFlow(String id) throws ApiException {
        ApiResponse<LoginFlow> localVarResp = getSelfServiceLoginFlowWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Login Flow
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;LoginFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginFlow> getSelfServiceLoginFlowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceLoginFlowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login Flow (asynchronously)
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceLoginFlowAsync(String id, final ApiCallback<LoginFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceLoginFlowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceLoginFlowAdmin
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceLoginFlowAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/login/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceLoginFlowAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceLoginFlowAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceLoginFlowAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Login Flow
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @return LoginFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public LoginFlow getSelfServiceLoginFlowAdmin(String id) throws ApiException {
        ApiResponse<LoginFlow> localVarResp = getSelfServiceLoginFlowAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Login Flow
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;LoginFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginFlow> getSelfServiceLoginFlowAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceLoginFlowAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login Flow (asynchronously)
     * This endpoint returns a login flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceLoginFlowAdminAsync(String id, final ApiCallback<LoginFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceLoginFlowAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceRecoveryFlow
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRecoveryFlowCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/recovery/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceRecoveryFlowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceRecoveryFlow(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get information about a recovery flow
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @return RecoveryFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryFlow getSelfServiceRecoveryFlow(String id) throws ApiException {
        ApiResponse<RecoveryFlow> localVarResp = getSelfServiceRecoveryFlowWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get information about a recovery flow
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;RecoveryFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryFlow> getSelfServiceRecoveryFlowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a recovery flow (asynchronously)
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRecoveryFlowAsync(String id, final ApiCallback<RecoveryFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceRecoveryFlowAdmin
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRecoveryFlowAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/recovery/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceRecoveryFlowAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceRecoveryFlowAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get information about a recovery flow
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @return RecoveryFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryFlow getSelfServiceRecoveryFlowAdmin(String id) throws ApiException {
        ApiResponse<RecoveryFlow> localVarResp = getSelfServiceRecoveryFlowAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get information about a recovery flow
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;RecoveryFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryFlow> getSelfServiceRecoveryFlowAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a recovery flow (asynchronously)
     * This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRecoveryFlowAdminAsync(String id, final ApiCallback<RecoveryFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceRecoveryFlowAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceRegistrationFlow
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRegistrationFlowCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/registration/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceRegistrationFlowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceRegistrationFlow(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Registration Flow
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @return RegistrationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationFlow getSelfServiceRegistrationFlow(String id) throws ApiException {
        ApiResponse<RegistrationFlow> localVarResp = getSelfServiceRegistrationFlowWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Registration Flow
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;RegistrationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationFlow> getSelfServiceRegistrationFlowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Registration Flow (asynchronously)
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRegistrationFlowAsync(String id, final ApiCallback<RegistrationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceRegistrationFlowAdmin
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRegistrationFlowAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/registration/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceRegistrationFlowAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceRegistrationFlowAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Registration Flow
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @return RegistrationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationFlow getSelfServiceRegistrationFlowAdmin(String id) throws ApiException {
        ApiResponse<RegistrationFlow> localVarResp = getSelfServiceRegistrationFlowAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Registration Flow
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;RegistrationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationFlow> getSelfServiceRegistrationFlowAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Registration Flow (asynchronously)
     * This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceRegistrationFlowAdminAsync(String id, final ApiCallback<RegistrationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceRegistrationFlowAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceSettingsFlow
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceSettingsFlowCall(String id, String xSessionToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/settings/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xSessionToken != null) {
            localVarHeaderParams.put("X-Session-Token", localVarApiClient.parameterToString(xSessionToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "sessionToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceSettingsFlowValidateBeforeCall(String id, String xSessionToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceSettingsFlow(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceSettingsFlowCall(id, xSessionToken, _callback);
        return localVarCall;

    }

    /**
     * Get Settings Flow
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return SettingsFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SettingsFlow getSelfServiceSettingsFlow(String id, String xSessionToken) throws ApiException {
        ApiResponse<SettingsFlow> localVarResp = getSelfServiceSettingsFlowWithHttpInfo(id, xSessionToken);
        return localVarResp.getData();
    }

    /**
     * Get Settings Flow
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return ApiResponse&lt;SettingsFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsFlow> getSelfServiceSettingsFlowWithHttpInfo(String id, String xSessionToken) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceSettingsFlowValidateBeforeCall(id, xSessionToken, null);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Settings Flow (asynchronously)
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceSettingsFlowAsync(String id, String xSessionToken, final ApiCallback<SettingsFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceSettingsFlowValidateBeforeCall(id, xSessionToken, _callback);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceSettingsFlowAdmin
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceSettingsFlowAdminCall(String id, String xSessionToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/settings/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (xSessionToken != null) {
            localVarHeaderParams.put("X-Session-Token", localVarApiClient.parameterToString(xSessionToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceSettingsFlowAdminValidateBeforeCall(String id, String xSessionToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceSettingsFlowAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceSettingsFlowAdminCall(id, xSessionToken, _callback);
        return localVarCall;

    }

    /**
     * Get Settings Flow
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return SettingsFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SettingsFlow getSelfServiceSettingsFlowAdmin(String id, String xSessionToken) throws ApiException {
        ApiResponse<SettingsFlow> localVarResp = getSelfServiceSettingsFlowAdminWithHttpInfo(id, xSessionToken);
        return localVarResp.getData();
    }

    /**
     * Get Settings Flow
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return ApiResponse&lt;SettingsFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsFlow> getSelfServiceSettingsFlowAdminWithHttpInfo(String id, String xSessionToken) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceSettingsFlowAdminValidateBeforeCall(id, xSessionToken, null);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Settings Flow (asynchronously)
     * When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes but instead 403 or 500 to improve data privacy.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceSettingsFlowAdminAsync(String id, String xSessionToken, final ApiCallback<SettingsFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceSettingsFlowAdminValidateBeforeCall(id, xSessionToken, _callback);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceVerificationFlow
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceVerificationFlowCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/verification/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceVerificationFlowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceVerificationFlow(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceVerificationFlowCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Verification Flow
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @return VerificationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public VerificationFlow getSelfServiceVerificationFlow(String id) throws ApiException {
        ApiResponse<VerificationFlow> localVarResp = getSelfServiceVerificationFlowWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Verification Flow
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;VerificationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationFlow> getSelfServiceVerificationFlowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceVerificationFlowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Verification Flow (asynchronously)
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceVerificationFlowAsync(String id, final ApiCallback<VerificationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceVerificationFlowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfServiceVerificationFlowAdmin
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceVerificationFlowAdminCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/self-service/verification/flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfServiceVerificationFlowAdminValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSelfServiceVerificationFlowAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = getSelfServiceVerificationFlowAdminCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Verification Flow
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @return VerificationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public VerificationFlow getSelfServiceVerificationFlowAdmin(String id) throws ApiException {
        ApiResponse<VerificationFlow> localVarResp = getSelfServiceVerificationFlowAdminWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Verification Flow
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @return ApiResponse&lt;VerificationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationFlow> getSelfServiceVerificationFlowAdminWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSelfServiceVerificationFlowAdminValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Verification Flow (asynchronously)
     * This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfServiceVerificationFlowAdminAsync(String id, final ApiCallback<VerificationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfServiceVerificationFlowAdminValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionAdmin
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Ory Kratos version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionAdminCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionAdminValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVersionAdminCall(_callback);
        return localVarCall;

    }

    /**
     * Return Running Software Version.
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Ory Kratos version. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 getVersionAdmin() throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = getVersionAdminWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return Running Software Version.
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Ory Kratos version. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> getVersionAdminWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVersionAdminValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return Running Software Version. (asynchronously)
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Ory Kratos version. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionAdminAsync(final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionAdminValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceBrowserLogoutFlow
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceBrowserLogoutFlowCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/browser/flows/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceBrowserLogoutFlowValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceBrowserLogoutFlowCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Browser-Based Logout User Flow
     * This endpoint initializes a logout flow.  &gt; This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void initializeSelfServiceBrowserLogoutFlow() throws ApiException {
        initializeSelfServiceBrowserLogoutFlowWithHttpInfo();
    }

    /**
     * Initialize Browser-Based Logout User Flow
     * This endpoint initializes a logout flow.  &gt; This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> initializeSelfServiceBrowserLogoutFlowWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceBrowserLogoutFlowValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Browser-Based Logout User Flow (asynchronously)
     * This endpoint initializes a logout flow.  &gt; This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  On successful logout, the browser will be redirected (HTTP 302 Found) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceBrowserLogoutFlowAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceBrowserLogoutFlowValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceLoginForBrowsers
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceLoginForBrowsersCall(Boolean refresh, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/login/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refresh", refresh));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceLoginForBrowsersValidateBeforeCall(Boolean refresh, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceLoginForBrowsersCall(refresh, _callback);
        return localVarCall;

    }

    /**
     * Initialize Login Flow for Browsers
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @return LoginFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public LoginFlow initializeSelfServiceLoginForBrowsers(Boolean refresh) throws ApiException {
        ApiResponse<LoginFlow> localVarResp = initializeSelfServiceLoginForBrowsersWithHttpInfo(refresh);
        return localVarResp.getData();
    }

    /**
     * Initialize Login Flow for Browsers
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @return ApiResponse&lt;LoginFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginFlow> initializeSelfServiceLoginForBrowsersWithHttpInfo(Boolean refresh) throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceLoginForBrowsersValidateBeforeCall(refresh, null);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Login Flow for Browsers (asynchronously)
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the login flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceLoginForBrowsersAsync(Boolean refresh, final ApiCallback<LoginFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceLoginForBrowsersValidateBeforeCall(refresh, _callback);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceLoginWithoutBrowser
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceLoginWithoutBrowserCall(Boolean refresh, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/login/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refresh", refresh));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceLoginWithoutBrowserValidateBeforeCall(Boolean refresh, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceLoginWithoutBrowserCall(refresh, _callback);
        return localVarCall;

    }

    /**
     * Initialize Login Flow for APIs, Services, Apps, ...
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @return LoginFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public LoginFlow initializeSelfServiceLoginWithoutBrowser(Boolean refresh) throws ApiException {
        ApiResponse<LoginFlow> localVarResp = initializeSelfServiceLoginWithoutBrowserWithHttpInfo(refresh);
        return localVarResp.getData();
    }

    /**
     * Initialize Login Flow for APIs, Services, Apps, ...
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @return ApiResponse&lt;LoginFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginFlow> initializeSelfServiceLoginWithoutBrowserWithHttpInfo(Boolean refresh) throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceLoginWithoutBrowserValidateBeforeCall(refresh, null);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Login Flow for APIs, Services, Apps, ... (asynchronously)
     * This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param refresh Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceLoginWithoutBrowserAsync(Boolean refresh, final ApiCallback<LoginFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceLoginWithoutBrowserValidateBeforeCall(refresh, _callback);
        Type localVarReturnType = new TypeToken<LoginFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceRecoveryForBrowsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRecoveryForBrowsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/recovery/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceRecoveryForBrowsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForBrowsersCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Recovery Flow for Browser Clients
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void initializeSelfServiceRecoveryForBrowsers() throws ApiException {
        initializeSelfServiceRecoveryForBrowsersWithHttpInfo();
    }

    /**
     * Initialize Recovery Flow for Browser Clients
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> initializeSelfServiceRecoveryForBrowsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForBrowsersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Recovery Flow for Browser Clients (asynchronously)
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRecoveryForBrowsersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForBrowsersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceRecoveryForNativeApps
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRecoveryForNativeAppsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/recovery/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceRecoveryForNativeAppsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForNativeAppsCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Recovery Flow for Native Apps and API clients
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call &#x60;/self-service/recovery/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @return RecoveryFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryFlow initializeSelfServiceRecoveryForNativeApps() throws ApiException {
        ApiResponse<RecoveryFlow> localVarResp = initializeSelfServiceRecoveryForNativeAppsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Initialize Recovery Flow for Native Apps and API clients
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call &#x60;/self-service/recovery/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @return ApiResponse&lt;RecoveryFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryFlow> initializeSelfServiceRecoveryForNativeAppsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForNativeAppsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Recovery Flow for Native Apps and API clients (asynchronously)
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call &#x60;/self-service/recovery/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRecoveryForNativeAppsAsync(final ApiCallback<RecoveryFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceRecoveryForNativeAppsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RecoveryFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceRegistrationForBrowsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRegistrationForBrowsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/registration/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceRegistrationForBrowsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForBrowsersCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Registration Flow for browsers
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void initializeSelfServiceRegistrationForBrowsers() throws ApiException {
        initializeSelfServiceRegistrationForBrowsersWithHttpInfo();
    }

    /**
     * Initialize Registration Flow for browsers
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> initializeSelfServiceRegistrationForBrowsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForBrowsersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Registration Flow for browsers (asynchronously)
     * This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRegistrationForBrowsersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForBrowsersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceRegistrationForNativeApps
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRegistrationForNativeAppsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/registration/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceRegistrationForNativeAppsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForNativeAppsCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Registration Flow for Native Apps and API clients
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @return RegistrationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationFlow initializeSelfServiceRegistrationForNativeApps() throws ApiException {
        ApiResponse<RegistrationFlow> localVarResp = initializeSelfServiceRegistrationForNativeAppsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Initialize Registration Flow for Native Apps and API clients
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @return ApiResponse&lt;RegistrationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationFlow> initializeSelfServiceRegistrationForNativeAppsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForNativeAppsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Registration Flow for Native Apps and API clients (asynchronously)
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceRegistrationForNativeAppsAsync(final ApiCallback<RegistrationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceRegistrationForNativeAppsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RegistrationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceSettingsForBrowsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceSettingsForBrowsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/settings/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "sessionToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceSettingsForBrowsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceSettingsForBrowsersCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Settings Flow for Browsers
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void initializeSelfServiceSettingsForBrowsers() throws ApiException {
        initializeSelfServiceSettingsForBrowsersWithHttpInfo();
    }

    /**
     * Initialize Settings Flow for Browsers
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> initializeSelfServiceSettingsForBrowsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceSettingsForBrowsersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Settings Flow for Browsers (asynchronously)
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  :::note  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceSettingsForBrowsersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceSettingsForBrowsersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceSettingsForNativeApps
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceSettingsForNativeAppsCall(String xSessionToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/settings/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSessionToken != null) {
            localVarHeaderParams.put("X-Session-Token", localVarApiClient.parameterToString(xSessionToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "sessionToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceSettingsForNativeAppsValidateBeforeCall(String xSessionToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceSettingsForNativeAppsCall(xSessionToken, _callback);
        return localVarCall;

    }

    /**
     * Initialize Settings Flow for Native Apps and API clients
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return SettingsFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SettingsFlow initializeSelfServiceSettingsForNativeApps(String xSessionToken) throws ApiException {
        ApiResponse<SettingsFlow> localVarResp = initializeSelfServiceSettingsForNativeAppsWithHttpInfo(xSessionToken);
        return localVarResp.getData();
    }

    /**
     * Initialize Settings Flow for Native Apps and API clients
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @return ApiResponse&lt;SettingsFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsFlow> initializeSelfServiceSettingsForNativeAppsWithHttpInfo(String xSessionToken) throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceSettingsForNativeAppsValidateBeforeCall(xSessionToken, null);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Settings Flow for Native Apps and API clients (asynchronously)
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceSettingsForNativeAppsAsync(String xSessionToken, final ApiCallback<SettingsFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceSettingsForNativeAppsValidateBeforeCall(xSessionToken, _callback);
        Type localVarReturnType = new TypeToken<SettingsFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceVerificationForBrowsers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceVerificationForBrowsersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/verification/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceVerificationForBrowsersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceVerificationForBrowsersCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Verification Flow for Browser Clients
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void initializeSelfServiceVerificationForBrowsers() throws ApiException {
        initializeSelfServiceVerificationForBrowsersWithHttpInfo();
    }

    /**
     * Initialize Verification Flow for Browser Clients
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> initializeSelfServiceVerificationForBrowsersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceVerificationForBrowsersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Verification Flow for Browser Clients (asynchronously)
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceVerificationForBrowsersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceVerificationForBrowsersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for initializeSelfServiceVerificationForNativeApps
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceVerificationForNativeAppsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/verification/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initializeSelfServiceVerificationForNativeAppsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initializeSelfServiceVerificationForNativeAppsCall(_callback);
        return localVarCall;

    }

    /**
     * Initialize Verification Flow for Native Apps and API clients
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @return VerificationFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public VerificationFlow initializeSelfServiceVerificationForNativeApps() throws ApiException {
        ApiResponse<VerificationFlow> localVarResp = initializeSelfServiceVerificationForNativeAppsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Initialize Verification Flow for Native Apps and API clients
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @return ApiResponse&lt;VerificationFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationFlow> initializeSelfServiceVerificationForNativeAppsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = initializeSelfServiceVerificationForNativeAppsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Verification Flow for Native Apps and API clients (asynchronously)
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  :::warning  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  :::  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initializeSelfServiceVerificationForNativeAppsAsync(final ApiCallback<VerificationFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = initializeSelfServiceVerificationForNativeAppsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VerificationFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for isAliveAdmin
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept connections. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isAliveAdminCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/health/alive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isAliveAdminValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = isAliveAdminCall(_callback);
        return localVarCall;

    }

    /**
     * Check HTTP Server Status
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept connections. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 isAliveAdmin() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = isAliveAdminWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check HTTP Server Status
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept connections. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> isAliveAdminWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = isAliveAdminValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check HTTP Server Status (asynchronously)
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept connections. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isAliveAdminAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = isAliveAdminValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for isReadyAdmin
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept requests. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Ory Kratos is not yet ready to accept requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isReadyAdminCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/health/ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isReadyAdminValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = isReadyAdminCall(_callback);
        return localVarCall;

    }

    /**
     * Check HTTP Server and Database Status
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept requests. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Ory Kratos is not yet ready to accept requests. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 isReadyAdmin() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = isReadyAdminWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check HTTP Server and Database Status
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept requests. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Ory Kratos is not yet ready to accept requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> isReadyAdminWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = isReadyAdminValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check HTTP Server and Database Status (asynchronously)
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ory Kratos is ready to accept requests. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Ory Kratos is not yet ready to accept requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isReadyAdminAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = isReadyAdminValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIdentitiesAdmin
     * @param perPage Items per Page  This is the number of items per page. (optional, default to 100)
     * @param page Pagination Page (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of identities. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIdentitiesAdminCall(Long perPage, Long page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIdentitiesAdminValidateBeforeCall(Long perPage, Long page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listIdentitiesAdminCall(perPage, page, _callback);
        return localVarCall;

    }

    /**
     * List Identities
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param perPage Items per Page  This is the number of items per page. (optional, default to 100)
     * @param page Pagination Page (optional, default to 0)
     * @return List&lt;Identity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of identities. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public List<Identity> listIdentitiesAdmin(Long perPage, Long page) throws ApiException {
        ApiResponse<List<Identity>> localVarResp = listIdentitiesAdminWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List Identities
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param perPage Items per Page  This is the number of items per page. (optional, default to 100)
     * @param page Pagination Page (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Identity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of identities. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Identity>> listIdentitiesAdminWithHttpInfo(Long perPage, Long page) throws ApiException {
        okhttp3.Call localVarCall = listIdentitiesAdminValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Identity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Identities (asynchronously)
     * Lists all identities. Does not support search at the moment.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param perPage Items per Page  This is the number of items per page. (optional, default to 100)
     * @param page Pagination Page (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of identities. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIdentitiesAdminAsync(Long perPage, Long page, final ApiCallback<List<Identity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdentitiesAdminValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Identity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prometheusAdmin
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prometheusAdminCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/metrics/prometheus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prometheusAdminValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = prometheusAdminCall(_callback);
        return localVarCall;

    }

    /**
     * Get snapshot metrics from the Hydra service. If you&#39;re using k8s, you can then add annotations to your deployment like so:
     * &#x60;&#x60;&#x60; metadata: annotations: prometheus.io/port: \&quot;4434\&quot; prometheus.io/path: \&quot;/metrics/prometheus\&quot; &#x60;&#x60;&#x60;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
     </table>
     */
    public void prometheusAdmin() throws ApiException {
        prometheusAdminWithHttpInfo();
    }

    /**
     * Get snapshot metrics from the Hydra service. If you&#39;re using k8s, you can then add annotations to your deployment like so:
     * &#x60;&#x60;&#x60; metadata: annotations: prometheus.io/port: \&quot;4434\&quot; prometheus.io/path: \&quot;/metrics/prometheus\&quot; &#x60;&#x60;&#x60;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> prometheusAdminWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = prometheusAdminValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get snapshot metrics from the Hydra service. If you&#39;re using k8s, you can then add annotations to your deployment like so: (asynchronously)
     * &#x60;&#x60;&#x60; metadata: annotations: prometheus.io/port: \&quot;4434\&quot; prometheus.io/path: \&quot;/metrics/prometheus\&quot; &#x60;&#x60;&#x60;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prometheusAdminAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = prometheusAdminValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeSession
     * @param revokeSession  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeSessionCall(RevokeSession revokeSession, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = revokeSession;

        // create path and map variables
        String localVarPath = "/api/kratos/public/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeSessionValidateBeforeCall(RevokeSession revokeSession, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'revokeSession' is set
        if (revokeSession == null) {
            throw new ApiException("Missing the required parameter 'revokeSession' when calling revokeSession(Async)");
        }
        

        okhttp3.Call localVarCall = revokeSessionCall(revokeSession, _callback);
        return localVarCall;

    }

    /**
     * Initialize Logout Flow for API Clients - Revoke a Session
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @param revokeSession  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void revokeSession(RevokeSession revokeSession) throws ApiException {
        revokeSessionWithHttpInfo(revokeSession);
    }

    /**
     * Initialize Logout Flow for API Clients - Revoke a Session
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @param revokeSession  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeSessionWithHttpInfo(RevokeSession revokeSession) throws ApiException {
        okhttp3.Call localVarCall = revokeSessionValidateBeforeCall(revokeSession, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initialize Logout Flow for API Clients - Revoke a Session (asynchronously)
     * Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients such as mobile apps to log the user out of the system and invalidate the session.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @param revokeSession  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeSessionAsync(RevokeSession revokeSession, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeSessionValidateBeforeCall(revokeSession, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceLoginFlow
     * @param flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceLoginFlow  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceLoginFlowCall(String flow, SubmitSelfServiceLoginFlow submitSelfServiceLoginFlow, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = submitSelfServiceLoginFlow;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceLoginFlowValidateBeforeCall(String flow, SubmitSelfServiceLoginFlow submitSelfServiceLoginFlow, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flow' is set
        if (flow == null) {
            throw new ApiException("Missing the required parameter 'flow' when calling submitSelfServiceLoginFlow(Async)");
        }
        

        okhttp3.Call localVarCall = submitSelfServiceLoginFlowCall(flow, submitSelfServiceLoginFlow, _callback);
        return localVarCall;

    }

    /**
     * Submit a Login Flow
     * Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceLoginFlow  (optional)
     * @return LoginViaApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public LoginViaApiResponse submitSelfServiceLoginFlow(String flow, SubmitSelfServiceLoginFlow submitSelfServiceLoginFlow) throws ApiException {
        ApiResponse<LoginViaApiResponse> localVarResp = submitSelfServiceLoginFlowWithHttpInfo(flow, submitSelfServiceLoginFlow);
        return localVarResp.getData();
    }

    /**
     * Submit a Login Flow
     * Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceLoginFlow  (optional)
     * @return ApiResponse&lt;LoginViaApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginViaApiResponse> submitSelfServiceLoginFlowWithHttpInfo(String flow, SubmitSelfServiceLoginFlow submitSelfServiceLoginFlow) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceLoginFlowValidateBeforeCall(flow, submitSelfServiceLoginFlow, null);
        Type localVarReturnType = new TypeToken<LoginViaApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Login Flow (asynchronously)
     * Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceLoginFlow  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> loginViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> loginFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceLoginFlowAsync(String flow, SubmitSelfServiceLoginFlow submitSelfServiceLoginFlow, final ApiCallback<LoginViaApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceLoginFlowValidateBeforeCall(flow, submitSelfServiceLoginFlow, _callback);
        Type localVarReturnType = new TypeToken<LoginViaApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceRecoveryFlow
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRecoveryFlowCall(String flow, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/recovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceRecoveryFlowValidateBeforeCall(String flow, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flow' is set
        if (flow == null) {
            throw new ApiException("Missing the required parameter 'flow' when calling submitSelfServiceRecoveryFlow(Async)");
        }
        

        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowCall(flow, body, _callback);
        return localVarCall;

    }

    /**
     * Complete Recovery Flow
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void submitSelfServiceRecoveryFlow(String flow, Object body) throws ApiException {
        submitSelfServiceRecoveryFlowWithHttpInfo(flow, body);
    }

    /**
     * Complete Recovery Flow
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitSelfServiceRecoveryFlowWithHttpInfo(String flow, Object body) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowValidateBeforeCall(flow, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete Recovery Flow (asynchronously)
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRecoveryFlowAsync(String flow, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowValidateBeforeCall(flow, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceRecoveryFlowWithLinkMethod
     * @param token Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user. (optional)
     * @param flow The Flow ID  format: uuid (optional)
     * @param submitSelfServiceRecoveryFlowWithLinkMethod  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRecoveryFlowWithLinkMethodCall(String token, String flow, SubmitSelfServiceRecoveryFlowWithLinkMethod submitSelfServiceRecoveryFlowWithLinkMethod, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = submitSelfServiceRecoveryFlowWithLinkMethod;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/recovery/methods/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceRecoveryFlowWithLinkMethodValidateBeforeCall(String token, String flow, SubmitSelfServiceRecoveryFlowWithLinkMethod submitSelfServiceRecoveryFlowWithLinkMethod, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowWithLinkMethodCall(token, flow, submitSelfServiceRecoveryFlowWithLinkMethod, _callback);
        return localVarCall;

    }

    /**
     * Complete Recovery Flow with Link Method
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param token Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user. (optional)
     * @param flow The Flow ID  format: uuid (optional)
     * @param submitSelfServiceRecoveryFlowWithLinkMethod  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void submitSelfServiceRecoveryFlowWithLinkMethod(String token, String flow, SubmitSelfServiceRecoveryFlowWithLinkMethod submitSelfServiceRecoveryFlowWithLinkMethod) throws ApiException {
        submitSelfServiceRecoveryFlowWithLinkMethodWithHttpInfo(token, flow, submitSelfServiceRecoveryFlowWithLinkMethod);
    }

    /**
     * Complete Recovery Flow with Link Method
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param token Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user. (optional)
     * @param flow The Flow ID  format: uuid (optional)
     * @param submitSelfServiceRecoveryFlowWithLinkMethod  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitSelfServiceRecoveryFlowWithLinkMethodWithHttpInfo(String token, String flow, SubmitSelfServiceRecoveryFlowWithLinkMethod submitSelfServiceRecoveryFlowWithLinkMethod) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowWithLinkMethodValidateBeforeCall(token, flow, submitSelfServiceRecoveryFlowWithLinkMethod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete Recovery Flow with Link Method (asynchronously)
     * Use this endpoint to complete a recovery flow using the link method. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
     * @param token Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user. (optional)
     * @param flow The Flow ID  format: uuid (optional)
     * @param submitSelfServiceRecoveryFlowWithLinkMethod  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> recoveryFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRecoveryFlowWithLinkMethodAsync(String token, String flow, SubmitSelfServiceRecoveryFlowWithLinkMethod submitSelfServiceRecoveryFlowWithLinkMethod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceRecoveryFlowWithLinkMethodValidateBeforeCall(token, flow, submitSelfServiceRecoveryFlowWithLinkMethod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceRegistrationFlow
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceRegistrationFlow  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRegistrationFlowCall(String flow, SubmitSelfServiceRegistrationFlow submitSelfServiceRegistrationFlow, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = submitSelfServiceRegistrationFlow;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/registration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceRegistrationFlowValidateBeforeCall(String flow, SubmitSelfServiceRegistrationFlow submitSelfServiceRegistrationFlow, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flow' is set
        if (flow == null) {
            throw new ApiException("Missing the required parameter 'flow' when calling submitSelfServiceRegistrationFlow(Async)");
        }
        

        okhttp3.Call localVarCall = submitSelfServiceRegistrationFlowCall(flow, submitSelfServiceRegistrationFlow, _callback);
        return localVarCall;

    }

    /**
     * Submit a Registration Flow
     * Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceRegistrationFlow  (optional)
     * @return RegistrationViaApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public RegistrationViaApiResponse submitSelfServiceRegistrationFlow(String flow, SubmitSelfServiceRegistrationFlow submitSelfServiceRegistrationFlow) throws ApiException {
        ApiResponse<RegistrationViaApiResponse> localVarResp = submitSelfServiceRegistrationFlowWithHttpInfo(flow, submitSelfServiceRegistrationFlow);
        return localVarResp.getData();
    }

    /**
     * Submit a Registration Flow
     * Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceRegistrationFlow  (optional)
     * @return ApiResponse&lt;RegistrationViaApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistrationViaApiResponse> submitSelfServiceRegistrationFlowWithHttpInfo(String flow, SubmitSelfServiceRegistrationFlow submitSelfServiceRegistrationFlow) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceRegistrationFlowValidateBeforeCall(flow, submitSelfServiceRegistrationFlow, null);
        Type localVarReturnType = new TypeToken<RegistrationViaApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a Registration Flow (asynchronously)
     * Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  More information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param submitSelfServiceRegistrationFlow  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registrationViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> registrationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceRegistrationFlowAsync(String flow, SubmitSelfServiceRegistrationFlow submitSelfServiceRegistrationFlow, final ApiCallback<RegistrationViaApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceRegistrationFlowValidateBeforeCall(flow, submitSelfServiceRegistrationFlow, _callback);
        Type localVarReturnType = new TypeToken<RegistrationViaApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceSettingsFlow
     * @param flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param submitSelfServiceSettingsFlow  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceSettingsFlowCall(String flow, String xSessionToken, SubmitSelfServiceSettingsFlow submitSelfServiceSettingsFlow, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = submitSelfServiceSettingsFlow;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        if (xSessionToken != null) {
            localVarHeaderParams.put("X-Session-Token", localVarApiClient.parameterToString(xSessionToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "sessionToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceSettingsFlowValidateBeforeCall(String flow, String xSessionToken, SubmitSelfServiceSettingsFlow submitSelfServiceSettingsFlow, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flow' is set
        if (flow == null) {
            throw new ApiException("Missing the required parameter 'flow' when calling submitSelfServiceSettingsFlow(Async)");
        }
        

        okhttp3.Call localVarCall = submitSelfServiceSettingsFlowCall(flow, xSessionToken, submitSelfServiceSettingsFlow, _callback);
        return localVarCall;

    }

    /**
     * Complete Settings Flow
     * Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached. Implies that the user needs to re-authenticate.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param submitSelfServiceSettingsFlow  (optional)
     * @return SettingsViaApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public SettingsViaApiResponse submitSelfServiceSettingsFlow(String flow, String xSessionToken, SubmitSelfServiceSettingsFlow submitSelfServiceSettingsFlow) throws ApiException {
        ApiResponse<SettingsViaApiResponse> localVarResp = submitSelfServiceSettingsFlowWithHttpInfo(flow, xSessionToken, submitSelfServiceSettingsFlow);
        return localVarResp.getData();
    }

    /**
     * Complete Settings Flow
     * Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached. Implies that the user needs to re-authenticate.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param submitSelfServiceSettingsFlow  (optional)
     * @return ApiResponse&lt;SettingsViaApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsViaApiResponse> submitSelfServiceSettingsFlowWithHttpInfo(String flow, String xSessionToken, SubmitSelfServiceSettingsFlow submitSelfServiceSettingsFlow) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceSettingsFlowValidateBeforeCall(flow, xSessionToken, submitSelfServiceSettingsFlow, null);
        Type localVarReturnType = new TypeToken<SettingsViaApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Complete Settings Flow (asynchronously)
     * Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached. Implies that the user needs to re-authenticate.  Browser flows expect &#x60;application/x-www-form-urlencoded&#x60; to be sent in the body and responds with a HTTP 302 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 302 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
     * @param flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;). (required)
     * @param xSessionToken The Session Token of the Identity performing the settings flow. (optional)
     * @param submitSelfServiceSettingsFlow  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> settingsViaApiResponse </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> settingsFlow </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceSettingsFlowAsync(String flow, String xSessionToken, SubmitSelfServiceSettingsFlow submitSelfServiceSettingsFlow, final ApiCallback<SettingsViaApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceSettingsFlowValidateBeforeCall(flow, xSessionToken, submitSelfServiceSettingsFlow, _callback);
        Type localVarReturnType = new TypeToken<SettingsViaApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSelfServiceVerificationFlow
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceVerificationFlowCall(String flow, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/kratos/public/self-service/verification/methods/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow", flow));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSelfServiceVerificationFlowValidateBeforeCall(String flow, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flow' is set
        if (flow == null) {
            throw new ApiException("Missing the required parameter 'flow' when calling submitSelfServiceVerificationFlow(Async)");
        }
        

        okhttp3.Call localVarCall = submitSelfServiceVerificationFlowCall(flow, body, _callback);
        return localVarCall;

    }

    /**
     * Complete Verification Flow
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public void submitSelfServiceVerificationFlow(String flow, Object body) throws ApiException {
        submitSelfServiceVerificationFlowWithHttpInfo(flow, body);
    }

    /**
     * Complete Verification Flow
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitSelfServiceVerificationFlowWithHttpInfo(String flow, Object body) throws ApiException {
        okhttp3.Call localVarCall = submitSelfServiceVerificationFlowValidateBeforeCall(flow, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Complete Verification Flow (asynchronously)
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
     * @param flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;). (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> verificationFlow </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSelfServiceVerificationFlowAsync(String flow, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSelfServiceVerificationFlowValidateBeforeCall(flow, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for toSession
     * @param xSessionToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toSessionCall(String xSessionToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kratos/public/sessions/whoami";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSessionToken != null) {
            localVarHeaderParams.put("X-Session-Token", localVarApiClient.parameterToString(xSessionToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "sessionCookie" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toSessionValidateBeforeCall(String xSessionToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = toSessionCall(xSessionToken, _callback);
        return localVarCall;

    }

    /**
     * Check Who the Current HTTP Session Belongs To
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!
     * @param xSessionToken  (optional)
     * @return Session
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Session toSession(String xSessionToken) throws ApiException {
        ApiResponse<Session> localVarResp = toSessionWithHttpInfo(xSessionToken);
        return localVarResp.getData();
    }

    /**
     * Check Who the Current HTTP Session Belongs To
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!
     * @param xSessionToken  (optional)
     * @return ApiResponse&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Session> toSessionWithHttpInfo(String xSessionToken) throws ApiException {
        okhttp3.Call localVarCall = toSessionValidateBeforeCall(xSessionToken, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Who the Current HTTP Session Belongs To (asynchronously)
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. Additionally when the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!
     * @param xSessionToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> session </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toSessionAsync(String xSessionToken, final ApiCallback<Session> _callback) throws ApiException {

        okhttp3.Call localVarCall = toSessionValidateBeforeCall(xSessionToken, _callback);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIdentityAdmin
     * @param id ID must be set to the ID of identity you want to update (required)
     * @param updateIdentity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> identity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIdentityAdminCall(String id, UpdateIdentity updateIdentity, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateIdentity;

        // create path and map variables
        String localVarPath = "/api/kratos/admin/identities/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oryToken" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdentityAdminValidateBeforeCall(String id, UpdateIdentity updateIdentity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIdentityAdmin(Async)");
        }
        

        okhttp3.Call localVarCall = updateIdentityAdminCall(id, updateIdentity, _callback);
        return localVarCall;

    }

    /**
     * Update an Identity
     * This endpoint updates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to update (required)
     * @param updateIdentity  (optional)
     * @return Identity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> identity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public Identity updateIdentityAdmin(String id, UpdateIdentity updateIdentity) throws ApiException {
        ApiResponse<Identity> localVarResp = updateIdentityAdminWithHttpInfo(id, updateIdentity);
        return localVarResp.getData();
    }

    /**
     * Update an Identity
     * This endpoint updates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to update (required)
     * @param updateIdentity  (optional)
     * @return ApiResponse&lt;Identity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> identity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Identity> updateIdentityAdminWithHttpInfo(String id, UpdateIdentity updateIdentity) throws ApiException {
        okhttp3.Call localVarCall = updateIdentityAdminValidateBeforeCall(id, updateIdentity, null);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Identity (asynchronously)
     * This endpoint updates an identity. It is NOT possible to set an identity&#39;s credentials (password, ...) using this method! A way to achieve that will be introduced in the future.  The full identity payload (except credentials) is expected. This endpoint does not support patching.  Learn how identities work in [Ory Kratos&#39; User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
     * @param id ID must be set to the ID of identity you want to update (required)
     * @param updateIdentity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> identity </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> jsonError </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> jsonError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIdentityAdminAsync(String id, UpdateIdentity updateIdentity, final ApiCallback<Identity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdentityAdminValidateBeforeCall(id, updateIdentity, _callback);
        Type localVarReturnType = new TypeToken<Identity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
